#!/usr/bin/perl -w

use strict;
use Getopt::Std;

# Call this script with no arguments while in the directory
# /nfsvol/nls/II_Group_WorkArea/flang/Projects/FDA/RECONCILE/ANNOTATIONS

# my $DISOSTs="acab,anab,cgab,comd,dsyn,emod,fndg,inpo,mobd,neop,patf,sosy";
# my @DISOSTs = split /,/, $DISOSTs;
# my %DISOSTs = map { $_ => 1 } @DISOSTs;

# @MMIFiles should be all the *.MMI files in the MetaMap directory, e.g.,
# ABIRATERONE_adverse_reactions.MMI
# ABIRATERONE_warnings_and_precautions.MMI
# ABOBOTULINUMTOXINA_adverse_reactions.MMI
# etc.

# OR
# pass specific files in as command-line args e.g.,
# gen_MM_offsets ABIRATERONE_adverse_reactions.MMI ABIRATERONE_warnings_and_precautions.MMI
# The analogous *.txt files are assumed to be present in the parent directory

my $PROGRAM = $0;
my $USAGE = "$PROGRAM OR $PROGRAM ABIRATERONE_adverse_reactions.MMI ...";

my %OPTS;
getopts('s:', \%OPTS);

my $StopListFile = defined $OPTS{s} ? $OPTS{s} : "../DATA/StopList";

my @MMIFiles;
if ( scalar @ARGV > 0 ) {
    @MMIFiles = @ARGV;
} # if ( scalar @ARGV > 0 ) 
else {
    opendir(my $IN, '.') || die "can't open directory .: $!";
    @MMIFiles = grep { /\.MMI$/ } readdir($IN);
    close $IN;
} # else

open(SL, "<", "$StopListFile") || die "Can't open $StopListFile!\n";
print "Loading stop list from $StopListFile\n";
my %StopList;
while ( <SL> ) {
    chomp;
    my $Line = $_;
    next if $Line =~ /^\s*$/;
    $StopList{"\L$Line"} = 1;
} # while (<SL>)

for my $FILE ( @MMIFiles ) {
    &process_one_file($FILE);
} # for my $FILE ( @MetaMapFiles )

sub process_one_file {
    my ( $INFILE) = @_;

    die "Input file $INFILE must have an \"MMI\" extension!" if $INFILE !~ /\.MMI$/;

    # grab the contents of the text file
    ( my $TextFile = $INFILE ) =~ s/MMI/txt/;
    $TextFile = "../Txt/$TextFile";
    open(TXT, "<", $TextFile) || die "can't open file text file $TextFile: $!";
    my @TxtFileLines = <TXT>;
    close TXT;
    print "Generating offsets from file $INFILE\n";
    my $AllLabelText = join "", @TxtFileLines;

    open(IN, "<", $INFILE)  || die "can't open file MetaMap output file $INFILE: $!";
    my @Data;
    while (<IN>) {
	chomp;
	my $Line = $_;
	my ( $PMID, $Type, $MMIScore, $UMLSPrefName,
             $CUI, $SemTypes, $AllTuples, $Location, $AllOffsets, undef ) = ( split /\|/, $Line );
	&validate_line($PMID, $Type, $MMIScore, $Location, $AllOffsets, $Line );
	# Skip AA lines, e.g.,
	# 00000000|AA|AST|aspartate transaminase|1|3|3|22|2456:3
	# 00000000|AA|ALT|alanine transaminase|1|3|3|20|2545:3
	next if $Type ne "MMI";
	# All  findings: 40.75
	# Good findings: 45.85
	# NO   findings: 50.37
	# next if $SemTypes eq "[fndg]";
	# ignore fndgs that consist of mostly numbers
	# "0%", "1+", "1-2", "10%", "3/4", "<50", etc.

	# skip over and ignore the line in the fielded MMI file
	# if the SemType is "fndg" and the UMLS Preferred Name is like "0%"
### 	next if $SemTypes eq "[fndg]" && &mostly_digits($UMLSPrefName);
	# $SemTypes looks like "[dsyn]" or "[orch,phsu]"
	# remove the leading "[" and trailing "]"
	$SemTypes =~ s/^\[//;
	$SemTypes =~ s/\]$//;
	# my @SemTypes = split /,/, $SemTypes;
	# # Don't fother with SemType filtering
	# my $FoundDISO = 1;
	# for my $ST ( @SemTypes ) {
	#     if ( exists $DISOSTs{$ST} ) {
	# 	$FoundDISO = 1;
	# 	last;
	#     } # if ( exists $DISOSTs{$ST} )
	# } # for my $ST ( @SemTypes )
	# # Skip this line of MMI output if it contains no DISO SemType
	# next if $FoundDISO == 0;
	my @AllTuples = split /,"/, $AllTuples;
	# @AllOffsets contains distinct offsets chunks
	my @AllOffsets = split /;/, $AllOffsets;
	# Must have same number of tuples and offsets!
	die "Mismatch in count of tuples and offsets in $INFILE: $Line\n"
	    if scalar @AllTuples != scalar @AllOffsets;
	while ( scalar @AllTuples > 0 ) {
	    # grab the first tuple
	    my $Tuple       = shift @AllTuples;
	    my $OffsetChunk = shift @AllOffsets;
	    
	    # Skip this $Tuple/$OffsetChunk pair if the concept is negated;
	    next if $Tuple =~ /-1$/;
	    # of if the concept is purely numeric (all of these will have fndg SemType)
	    # this next test is taken care of by the call to mostly_digits above
	    # next if $Tuple =~ /-integer-/
	    # 	 || $Tuple =~ /-percentage-/					    
	    #	 || $Tuple =~ /-real_number-/;

	    $Tuple =~ s/^\[//;
	    $Tuple =~ s/\]$//;
	    # A tuple looks like this:
	    # "exposure to radiation"-tx-19-"exposure to radiation"-noun-0

	    # print "$Tuple\n";
	    # print "$OffsetChunk\n";
	    # grab the first offset chunk

	    # $OffsetChunk can take any one of several forms:
	    # (1) 228/6
	    # (2) 7059/5,7073/5
	    # (3) [1351/8],[1437/8]
	    # (4) [4061/10,4075/11],[4166/10,4180/11]
	    # Cases (3) and (4) must be split on "],["
	    # and each chunk treated separately.
	    my @AllOffsetChunks;
	    if ( $OffsetChunk =~ /\[/ ) {
		@AllOffsetChunks = split /\],\[/, $OffsetChunk;
	    } # if ( $OffsetChunk =~ /\[/ )
	    else {
		@AllOffsetChunks = ( $OffsetChunk )
	    } # else
	    foreach my $Offset ( @AllOffsetChunks ) {
		# print "OFFSET:$Offset\n";
	        $Offset =~ s/\[//;
	        $Offset =~ s/\]//;
		my $ConvOffset = "";
		my @AllOffsetPairs = split /,/, $Offset;
	        my $TextString = "";
		for my $OffsetPair ( @AllOffsetPairs ) {
		    my ( $StartPos, $Length ) = split /\//, $OffsetPair;
		    my $EndPos = $StartPos + $Length;
		    $TextString .= " " . substr($AllLabelText, $StartPos, $Length);
		    $ConvOffset .= ";$StartPos,$EndPos"
		} # for my $OffsetPair ( @AllOffsetPairs )
		$ConvOffset =~ s/^;//;
		$TextString =~ s/^ //;
		push @Data, "$ConvOffset|$CUI|$TextString|$SemTypes\n"
		    if ! exists $StopList{"\L$TextString"};
	    } # foreach my $Pair ( @OffsetPairs )
	} # while ( scalar @AllTuples > 0 )
    } # while (<IN>)
    close IN;
    ( my $OUTFILE = $INFILE ) =~ s/MMI/offsets/;
    open OUT, " > $OUTFILE";
    print OUT ( sort by_offsets @Data );
    close OUT;
} # sub process_one_file

sub by_offsets {
    # print "OFF1-$a-$b\n";
    ( my $StartPosA = $a ) =~ s/,.*//;
    ( my $EndPosA   = $a ) =~ s/.*,(\d+).*/$1/;
    ( my $StartPosB = $b ) =~ s/,.*//;
    ( my $EndPosB   = $b ) =~ s/.*,(\d+).*/$1/;
    # print "OFF2-$StartPosA-$EndPosA-$StartPosB-$EndPosB\n";
    return $StartPosA <=> $StartPosB
        || $EndPosB   <=> $EndPosA;
} # sub by_offsets

# We want to keep findings -- but only those that don't consist of mostly digits
sub mostly_digits {
    my ( $UMLSPrefName ) = @_;
    # Remove whitespace to capture strings like "1 - 3" and "5 - 9".
    $UMLSPrefName =~ s/\s//g;
    my $Length = length($UMLSPrefName);
    my $DigitCount = ( $UMLSPrefName =~ s/\d//g );
    return $DigitCount/$Length > 0.49;
} # sub mostly_digits

sub validate_line {
    my ( $PMID, $Type, $MMIScore, $Location, $AllOffsets, $Line ) = @_;
    #     die "Firstfield #1 \"$PMID\"\nshould be \"00000000\" in line\n\"$Line\"\n"
    #         if $PMID ne "00000000";
    die "Field #2 \"$Type\"\nshould be either \"AA\" or \"MMI\" in line\n\"$Line\"\n"
        if $Type ne "AA" && $Type ne "MMI";
    die "Field #3\"$MMIScore\"\nshould be a float in line\n\"$Line\"\n"
        if $Type eq "MMI" && $MMIScore !~ /^\d+\.\d+$/;
    die "Field #7 \"$Location\"\nshould be \"TX\" in line\n\"$Line\"\n"
        if $Type eq "MMI" && $Location ne "TX";
    die "Field #9 \"$AllOffsets\"\ndoes not contain valid offsets in line\n\"$Line\"\n"
        if ! &valid_offsets($Type, $AllOffsets);
} # sub validate_line {

sub valid_offsets {
    my ( $Type, $AllOffsets ) = @_;
    my $ValidOffsets = 1;

    # AA offsets look like "61:3"
    if ( ( $Type eq "AA" ) && ( $AllOffsets !~ /^\d+:\d+$/ ) ) {
	$ValidOffsets = 0;
    } # if ( ( $Type eq "AA" ) && ( $AllOffsets !~ /^\d+:\d+$/ ) )
    elsif ( $Type eq "MMI" ) {
	my @AllOffsetChunks = split /\;/, $AllOffsets;
	foreach my $OffsetChunk ( @AllOffsetChunks ) {
	    if ( ! &valid_offset_chunk($OffsetChunk) ) {
		$ValidOffsets = 0;
	    } # if ! &valid_offset_chunk{$OffsetChunk )
	} # foreach my $OffsetChunk ( @AllOffsetChunks )
    } # elsif ( $Type eq "MMI" )

    return $ValidOffsets;
} # sub valid_offsets


sub valid_offset_chunk {
    my ( $OffsetChunk ) = @_;

    my $ValidChunk = 0;
    # See https://metamap.nlm.nih.gov/Docs/MMI_Output_2016.pdf
    # for valid forms of MMI offsets
    #  Case a: "55/8"
    if ( $OffsetChunk =~ /^\d+\/\d+$/ ) {
	$ValidChunk = 1;
    } # if ( $OffsetChunk =~ /^\d+\/\d+$/ )

    # Case b: "4/1,29/1"
    elsif ( $OffsetChunk =~ /^\d+\/\d+(?:,\d+\/\d+)*$/ ) {
        $ValidChunk = 1;
    } # elsif ( $OffsetChunk =~ /^\d+\/\d+(?:,\d+\/\d+)*$/ )

    # Case c: "[189/9],[269/9]"
    elsif ( $OffsetChunk =~ /^\[\d+\/\d+\](?:,\[\d+\/\d+\])+$/ ) {
        $ValidChunk = 1;	    
    } # elsif ( $OffsetChunk =~ /\[\d+\/\d+\](?:\[\d+\/\d+\])+$/ )

    # Case d: "[4061/10,4075/11],[4166/10,4180/11]"
    elsif ( $OffsetChunk =~ /^\[\d+\/\d+(?:,\d+\/\d+)*\](?:,\[\d+\/\d+(?:,\d+\/\d+)*\])*$/ ) {
        $ValidChunk = 1;	    
    } # elsif ( $OffsetChunk =~ /\[\d+\/\d+\](?:\[\d+\/\d+\])+$/ )

    print "INVALID offset chunk:\"$OffsetChunk\"\n" if $ValidChunk == 0;

    return $ValidChunk;
} # sub valid_offset_chunk
    
